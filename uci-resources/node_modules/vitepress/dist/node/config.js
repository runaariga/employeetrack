"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveSiteData = exports.resolveUserConfig = exports.resolveConfig = exports.resolveSiteDataByRoute = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const globby_1 = __importDefault(require("globby"));
const vite_1 = require("vite");
const shared_1 = require("./shared");
const alias_1 = require("./alias");
const crypto_1 = require("crypto");
var shared_2 = require("./shared");
Object.defineProperty(exports, "resolveSiteDataByRoute", { enumerable: true, get: function () { return shared_2.resolveSiteDataByRoute; } });
const debug = require('debug')('vitepress:config');
const resolve = (root, file) => path_1.default.resolve(root, `.vitepress`, file);
async function resolveConfig(root = process.cwd()) {
    const userConfig = await resolveUserConfig(root);
    const site = await resolveSiteData(root, userConfig);
    const srcDir = path_1.default.resolve(root, userConfig.srcDir || '.');
    // resolve theme path
    const userThemeDir = resolve(root, 'theme');
    const themeDir = (await fs_extra_1.default.pathExists(userThemeDir))
        ? userThemeDir
        : alias_1.DEFAULT_THEME_PATH;
    // Important: globby/fast-glob doesn't guarantee order of the returned files.
    // We must sort the pages so the input list to rollup is stable across
    // builds - otherwise different input order could result in different exports
    // order in shared chunks which in turns invalidates the hash of every chunk!
    // JavaScript built-in sort() is mandated to be stable as of ES2019 and
    // supported in Node 12+, which is required by Vite.
    const pages = (await globby_1.default(['**.md'], {
        cwd: srcDir,
        ignore: ['**/node_modules', ...(userConfig.srcExclude || [])]
    })).sort();
    const hash = crypto_1.createHash('sha256')
        .update(pages.join(','))
        .digest('hex')
        .slice(0, 8);
    console.log(hash);
    const config = {
        root,
        srcDir,
        site,
        themeDir,
        pages,
        configPath: resolve(root, 'config.js'),
        outDir: resolve(root, 'dist'),
        tempDir: path_1.default.resolve(alias_1.APP_PATH, 'temp'),
        markdown: userConfig.markdown,
        alias: alias_1.resolveAliases(themeDir),
        vue: userConfig.vue,
        vite: userConfig.vite,
        mpa: !!userConfig.mpa
    };
    return config;
}
exports.resolveConfig = resolveConfig;
async function resolveUserConfig(root) {
    // load user config
    const configPath = resolve(root, 'config.js');
    const hasUserConfig = await fs_extra_1.default.pathExists(configPath);
    // always delete cache first before loading config
    delete require.cache[configPath];
    const userConfig = hasUserConfig ? require(configPath) : {};
    if (hasUserConfig) {
        debug(`loaded config at ${chalk_1.default.yellow(configPath)}`);
    }
    else {
        debug(`no config file found.`);
    }
    return resolveConfigExtends(userConfig);
}
exports.resolveUserConfig = resolveUserConfig;
async function resolveConfigExtends(config) {
    const resolved = await (typeof config === 'function' ? config() : config);
    if (resolved.extends) {
        const base = await resolveConfigExtends(resolved.extends);
        return mergeConfig(base, resolved);
    }
    return resolved;
}
function mergeConfig(a, b, isRoot = true) {
    const merged = { ...a };
    for (const key in b) {
        const value = b[key];
        if (value == null) {
            continue;
        }
        const existing = merged[key];
        if (Array.isArray(existing) && Array.isArray(value)) {
            merged[key] = [...existing, ...value];
            continue;
        }
        if (isObject(existing) && isObject(value)) {
            if (isRoot && key === 'vite') {
                merged[key] = vite_1.mergeConfig(existing, value);
            }
            else {
                merged[key] = mergeConfig(existing, value, false);
            }
            continue;
        }
        merged[key] = value;
    }
    return merged;
}
function isObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
async function resolveSiteData(root, userConfig) {
    userConfig = userConfig || (await resolveUserConfig(root));
    return {
        lang: userConfig.lang || 'en-US',
        title: userConfig.title || 'VitePress',
        description: userConfig.description || 'A VitePress site',
        base: userConfig.base ? userConfig.base.replace(/([^/])$/, '$1/') : '/',
        head: userConfig.head || [],
        themeConfig: userConfig.themeConfig || {},
        locales: userConfig.locales || {},
        langs: shared_1.createLangDictionary(userConfig)
    };
}
exports.resolveSiteData = resolveSiteData;
//# sourceMappingURL=config.js.map