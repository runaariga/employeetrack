import { AliasOptions, UserConfig as ViteConfig } from 'vite';
import { Options as VuePluginOptions } from '@vitejs/plugin-vue';
import { SiteData, HeadConfig, LocaleConfig } from './shared';
import { MarkdownOptions } from './markdown/markdown';
export { resolveSiteDataByRoute } from './shared';
export interface UserConfig<ThemeConfig = any> {
    extends?: RawConfigExports;
    lang?: string;
    base?: string;
    title?: string;
    description?: string;
    head?: HeadConfig[];
    themeConfig?: ThemeConfig;
    locales?: Record<string, LocaleConfig>;
    markdown?: MarkdownOptions;
    /**
     * Opitons to pass on to @vitejs/plugin-vue
     */
    vue?: VuePluginOptions;
    /**
     * Vite config
     */
    vite?: ViteConfig;
    srcDir?: string;
    srcExclude?: string[];
    /**
     * Enable MPA / zero-JS mode
     * @experimental
     */
    mpa?: boolean;
}
declare type RawConfigExports = UserConfig | Promise<UserConfig> | (() => UserConfig | Promise<UserConfig>);
export interface SiteConfig<ThemeConfig = any> {
    root: string;
    srcDir: string;
    site: SiteData<ThemeConfig>;
    configPath: string;
    themeDir: string;
    outDir: string;
    tempDir: string;
    alias: AliasOptions;
    pages: string[];
    markdown: MarkdownOptions | undefined;
    vue: VuePluginOptions | undefined;
    vite: ViteConfig | undefined;
    mpa: boolean;
}
export declare function resolveConfig(root?: string): Promise<SiteConfig>;
export declare function resolveUserConfig(root: string): Promise<UserConfig>;
export declare function resolveSiteData(root: string, userConfig?: UserConfig): Promise<SiteData>;
